# .gitconfig.cfg
#
# This file needs to be sources from another script in order to be used as a
# configuration file.
# ie source .gitconfig.cfg
#
#
#
#################################################################################

# Configuration variables
#################################################################################

COLOR_NORMAL="\e[39m"  	## Displaying color for normal output (default: \e[39m)
COLOR_INFO="\e[36m" 	## Displaying color for command information (default: \e[36m)
COLOR_SUCCESS="\e[32m"	## Displaying color for command success output (default: \e[32m)
COLOR_FAILURE="\e[31m"	## Displaying color for command failure output (default: \e[31m)

INIT_QUIET="false"   	## Allow git init to be quiet (default: false)

CONFIG_USERNAME="axelvaindal"					## Remote repository username
CONFIG_USERMAIL="pro.axelvaindal@gmail.com"		## Remote repository email
CONFIG_SCOPE="local"							## Configuration scope (default: local)

CLONE_QUIET="false"		## Allow git clone to be quiet (default: false)				

STATUS_UNTRACKED="false" 	## Allow status to display untracked files (default: false)
STATUS_IGNORED="false"		## Allow status to display ignored files (default: false)
STATUS_SHORT="false"		## Allow status to display in short format (default: false)
STATUS_VERBOSE="false"		## Allow status to display in verbose mode (default: false)

DIFF_QUIET="false"			## Allow diff to be quiet (default: false)
DIFF_RAW="false"			## Allow diff to display in raw mode (default: false)
DIFF_ALGORITHM="myers"		## Select diff used algorithm (default: myers)
DIFF_STAT="false"			## Allow diff to display stat (default: false)
DIFF_NUMSTAT="false"		## Allow diff to display numeric stat (default: false)
DIFF_SHORTSTAT="false"		## Allow diff to display stat in short mode (default: false)
DIFF_DIRSTAT="false"		## Allow diff to display directory stat (default: false)
DIFF_NAMEONLY="false"		## Allow diff to display only the name of changed files (default: false)
DIFF_NAMESTATUS="false"		## Allow diff to display only name and status of changed files (default: false)
DIFF_NOCOLOR="false"		## Allow diff to display in no color mode (default: false)
DIFF_PATCH="false"			## Allow diff to display in default mode either way (default: true)

ADD_FORCE="false"			## Allow add to work in force mode (default: false)
ADD_VERBOSE="true"			## Allow add to work in verbose mode (default: false)
ADD_DRY="false"				## Allow add to only show existing files to be added (default: false)
ADD_ALL="true"				## Allow add to always add all files (default: true)
ADD_IGNORE_ERRORS="false"	## Allow add to work in ignore errors mode (default: false)

COMMIT_QUIET="false"		## Allow commit to be quiet (default: false)
COMMIT_VERBOSE="false"		## Allow commit to work in verbose mode (default: false)

PUSH_ALL="false"			## Allow push to send all the branch at once (default: false)
PUSH_DRY="false"			## Allow push to only show existing files to be pushed (default: false)
PUSH_FORCE="false"			## Allow push to send in force mode (default: false)
PUSH_QUIET="false"			## Allow push to send in quiet mode (default: false)
PUSH_VERBOSE="false"		## Allow push to send in verbose mode (default: false)
PUSH_IPV4="false"			## Allow push to send only to IPV4 addresses (default: false)
PUSH_IPV6="false"			## Allow push to send only to IPV6 addresses (default: false)


PULL_QUIET="false"			## Allow pull to get in quiet mode (default: false)
PULL_VERBOSE="false"		## Allow pull to get in verbose mode (default: false)
PULL_STAT="false"			## Allow pull to display stats after fetch and merge (default: false)
PULL_REBASE="false"			## Allow pull to use rebase instead of merge after fetch (default: false)
PULL_ALL="false"			## Allow pull to get all the branch at once (default: false)
PULL_FORCE="false"			## Allow pull to get in force mode (default: false)
PULL_IPV4="false"			## Allow pull to get only to IPV4 addresses (default: false)
PULL_IPV6="false"			## Allow pull to get only to IPV6 addresses (default: false)

# Configuration functions
#################################################################################

##
# confirm
# This function is used in order to get a confirmation from a user.
##
confirm()
{
	read RESPONSE 
	if [[ "$RESPONSE" =~ ^[Yy][Ee][Ss]$ ]] 
	then
		return 0
	else
		return 1
	fi
}

##
# isFalse
# This function is used in order to know if parameter's value is "false" (case insensitive).
##
isFalse()
{
	if [[ "$1" =~ ^[Ff][Aa][Ll][Ss][Ee]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isTrue
# This function is used in order to know if parameter's value is "true" (case insensitive).
##
isTrue()
{
	if [[ "$1" =~ ^[Tt][Rr][Uu][Ee]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isLocalConfiguration
# This function is used in order to know if parameter's value is "local" (case insensitive).
##
isLocalConfiguration()
{
	if [[ "$1" =~ ^[Ll][Oo][Cc][Aa][Ll]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isGlobalConfiguration
# This function is used in order to know if parameter's value is "global" (case insensitive).
##
isGlobalConfiguration()
{
	if [[ "$1" =~ ^[Gg][Ll][Oo][Bb][Aa][Ll]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isSystemConfiguration
# This function is used in order to know if parameter's value is "system" (case insensitive).
##
isSystemConfiguration()
{
	if [[ "$1" =~ ^[Ss][Yy][Ss][Tt][Ee][Mm]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isAlgorithmMyers
# This function is used in order to know if parameter's value is "myers" (case insensitive).
##
isAlgorithmMyers()
{
	if [[ "$1" =~ ^[Mm][Yy][Ee][Rr][Ss]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isAlgorithmMinimal
# This function is used in order to know if parameter's value is "minimal" (case insensitive).
##
isAlgorithmMinimal()
{
	if [[ "$1" =~ ^[Mm][Ii][Nn][Ii][Mm][Aa][Ll]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isAlgorithmPatience
# This function is used in order to know if parameter's value is "patience" (case insensitive).
##
isAlgorithmPatience()
{
	if [[ "$1" =~ ^[Pp][Aa][Tt][Ii][Ee][Nn][Cc][Ee]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isAlgorithmHistogram
# This function is used in order to know if parameter's value is "histogram" (case insensitive).
##
isAlgorithmHistogram()
{
	if [[ "$1" =~ ^[Hh][Ii][Ss][Tt][Oo][Gg][Rr][Aa][Mm]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionInit
# This function is used in order to know if parameter's value is "init" (case insensitive).
##
isActionInit()
{
	if [[ "$1" =~ ^[Ii][Nn][Ii][Tt]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionConfig
# This function is used in order to know if parameter's value is "config" (case insensitive).
##
isActionConfig()
{
	if [[ "$1" =~ ^[Cc][Oo][Nn][Ff][Ii][Gg]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionClone
# This function is used in order to know if parameter's value is "clone" (case insensitive).
##
isActionClone()
{
	if [[ "$1" =~ ^[Cc][Ll][Oo][Nn][Ee]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionStatus
# This function is used in order to know if parameter's value is "status" (case insensitive).
##
isActionStatus()
{
	if [[ "$1" =~ ^[Ss][Tt][Aa][Tt][Uu][Ss]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionDiff
# This function is used in order to know if parameter's value is "diff" (case insensitive).
##
isActionDiff()
{
	if [[ "$1" =~ ^[Dd][Ii][Ff][Ff]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionAdd
# This function is used in order to know if parameter's value is "add" (case insensitive).
##
isActionAdd()
{
	if [[ "$1" =~ ^[Aa][Dd][Dd]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionCommit
# This function is used in order to know if parameter's value is "commit" (case insensitive).
##
isActionCommit()
{
	if [[ "$1" =~ ^[Cc][Oo][Mm][Mm][Ii][Tt]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionPush
# This function is used in order to know if parameter's value is "push" (case insensitive).
##
isActionPush()
{
	if [[ "$1" =~ ^[Pp][Uu][Ss][Hh]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isActionPull
# This function is used in order to know if parameter's value is "pull" (case insensitive).
##
isActionPull()
{
	if [[ "$1" =~ ^[Pp][Uu][Ll][Ll]$ ]]
	then
		return 0
	else
		return 1
	fi
}

